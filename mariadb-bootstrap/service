#!/bin/bash /usr/local/bin/dry-wit
# Copyright 2014-today Automated Computing Machinery S.L.
# Distributed under the terms of the GNU General Public License v3

function usage() {
cat <<EOF
$SCRIPT_NAME [-v[v]|-q|--quiet|-p=pass|--password=pass|-u=user|--user=user] [sql-folder]?
$SCRIPT_NAME [-h|--help]
(c) 2014-today Automated Computing Machinery S.L.
    Distributed under the terms of the GNU General Public License v3

Connects to a MariaDB server and processes the SQL files in sql-folder.

Where:
  * sql-folder: the folder where the SQL files are located. Can be overridden
with the SQL_FOLDER environment variable.
Flags:
  * -u | --user: the database user. Defaults to "root"
  * -p | --password: the database password.
Common flags:
    * -h | --help: Display this message.
    * -v: Increase the verbosity.
    * -vv: Increase the verbosity further.
    * -q | --quiet: Be silent.
EOF
}

# Requirements
function checkRequirements() {
  checkReq awk AWK_NOT_INSTALLED;
}

# Error messages
function defineErrors() {
  addError "INVALID_OPTION" "Unrecognized option";
  addError "AWK_NOT_INSTALLED" "awk is not installed";
  addError "NO_DB_USER_SPECIFIED" "The database user cannot be empty";
  addError "NO_SQL_FOLDER_SPECIFIED" "The SQL folder is mandatory";
  addError "NO_SQL_FILES_FOUND" "No SQL files found in ${SQL_FOLDER}";
}

## Parses the input
## dry-wit hook
function parseInput() {

  local _flags=$(extractFlags $@);
  local _flagCount;
  local _currentCount;

  # Flags
  for _flag in ${_flags}; do
    _flagCount=$((_flagCount+1));
    case ${_flag} in
      -h | --help | -v | -vv | -q)
         shift;
         ;;
      -u | --user)
         shift;
         DB_USER="${1}";
         shift;
         ;;
      -p | --password)
         shift;
         DB_PASSWORD="${1}";
         shift;
         ;;
      --)
        shift;
        break;
        ;;
    esac
  done

  if isEmpty "${DB_USER}"; then
    DB_USER="${DEFAULT_DB_USER}";
  fi

  # Parameters
  if isEmpty "${SQL_FOLDER}"; then
    SQL_FOLDER="$1";
    shift;
  fi
}

## Checking input
## dry-wit hook
function checkInput() {

  local _flags=$(extractFlags $@);
  local _flagCount;
  local _currentCount;
  logDebug -n "Checking input";

  # Flags
  for _flag in ${_flags}; do
    _flagCount=$((_flagCount+1));
    case ${_flag} in
      -h | --help | -v | -vv | -q | --quiet | -u | --user | -p | --password)
        ;;
      --)
        shift;
        break;
        ;;
      *) logDebugResult FAILURE "fail";
         exitWithErrorCode INVALID_OPTION ${_flag};
         ;;
    esac
  done

  if isEmpty "${DB_USER}"; then
    logDebugResult FAILURE "fail";
    exitWithErrorCode NO_DB_USER_SPECIFIED;
  fi

  if isEmpty "${SQL_FOLDER}"; then
    logDebugResult FAILURE "fail";
    exitWithErrorCode NO_SQL_FOLDER_SPECIFIED;
  else
    logDebugResult SUCCESS "valid";
  fi
}

## Checks whether given SQL file is marked as processed.
## -> 1: The SQL folder.
## -> 2: The SQL file.
## <- 0 if it's marked as processed already, 1 otherwise.
## Example:
##   if is_sql_file_marked_as_processed /tmp my.sql; then echo "/tmp/my.sql Already processed"; fi
function is_sql_file_marked_as_processed() {
  local _folder="${1}";
  local _file="${2}";
  local -i _rescode;

  checkNotEmpty "folder" "${_folder}" 1;
  checkNotEmpty "file" "${_file}" 2;

  if [ -e "${_folder}"/."${_file}".done ]; then
    _rescode=${TRUE};
  else
    _rescode=${FALSE};
  fi

  return ${_rescode};
}

## Marks given SQL file as processed.
## -> 1: The SQL folder.
## -> 2: The SQL file.
## <- 0 if it's marked successfully, 1 otherwise.
## Example:
##   if ! mark_sql_file_as_processed /tmp/my.sql; then echo "Cannot mark SQL file as processed"; fi
function mark_sql_file_as_processed() {
  local _folder="${1}";
  local _file="${2}";

  checkNotEmpty "folder" "${_folder}" 1;
  checkNotEmpty "file" "${_file}" 2;

  touch ${_folder}/."${_file}".done #2> /dev/null;
  return $?;
}

## Finds the SQL files in given folder.
## -> 1: The folder
## <- RESULT: A space-separated list of file names (relative to the folder).
## Example:
##   for f in find_sql_files /tmp; do echo "Found SQL: $f"; done
function find_sql_files() {
  local _folder="${1}";
  local _result=();

  checkNotEmpty "folder" "${_folder}" 1;

  for _aux in $(ls -a "${_folder}" | grep -v '^\..*$'); do
    if ! is_sql_file_marked_as_processed "${_folder}" "${_aux}"; then
      _result[${#_result[@]}]="${_aux}";
    fi
  done
  export RESULT=${_result[@]};
}

## Processes given SQL file.
## -> 1: The SQL file to process.
## <- 0 if the file is processed, 1 otherwise.
## Example:
##   if process_sql_file /tmp/my.dll; then echo "Done"; else echo "Failed"; fi
function process_sql_file() {
  local _file="${1}";
  local _logFile;

  checkNotEmpty "file" "${_file}" 1;

  logInfo -n "Processing ${_file}";

  createTempFile;
  _logFile="${RESULT}";

  if isEmpty "${DB_PASSWORD}"; then
      /usr/bin/mysql -h ${DB_HOST} -u ${DB_USER} < ${_file} 2>&1 > ${_logFile};
      _rescode=$?;
  else
    /usr/bin/mysql -h ${DB_HOST} -u ${DB_USER} --password="${DB_PASSWORD}" < ${_file} 2>&1 > ${_logFile};
    _rescode=$?;
  fi
  if isTrue ${_rescode}; then
    if ! mark_sql_file_as_processed "$(dirname ${_file})" "$(basename ${_file})"; then
      logInfoResult SUCCESS "warning";
      logInfo "Cannot mark ${_file} as processed";
    else
      logInfoResult SUCCESS "done";
    fi
  else
    logInfoResult FAILURE "failed";
    cat ${_logFile};
  fi
}

## Main logic
## dry-wit hook
function main() {
  local _sqlFiles;

  local _atLeastOneFile=${FALSE};

  find_sql_files "${SQL_FOLDER}";
  _sqlFiles="${RESULT}";

  for _file in ${_sqlFiles}; do
    _atLeastOneFile=${TRUE};
    process_sql_file "${SQL_FOLDER}/${_file}";
  done

  if isFalse "${_atLeastOneFile}"; then
    exitWithErrorCode NO_SQL_FILES_FOUND;
  fi
}

# vim: syntax=sh ts=2 sw=2 sts=4 sr noet
