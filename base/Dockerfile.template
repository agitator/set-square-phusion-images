@include("preamble")
FROM ${ROOT_IMAGE}
@include("maintainer")

ENV DEBIAN_FRONTEND="noninteractive" \
    TERM="linux" \
    PATH="${PATH}:/usr/local/bin" \
    DEFAULT_LOCALE="${DEFAULT_LOCALE}" \
    DEFAULT_ENCODING="${DEFAULT_ENCODING}"

@include("addon-toggles")

# /usr/local/bin
COPY dry-wit aptget-install.sh aptget-install.inc.sh aptget-cleanup.sh aptget-cleanup.inc.sh \
     process-file.sh data copy.sh ssh.sh \
     backup.sh backup-folder.sh backup-folder.inc.sh backup-volumes.sh backup-volumes.inc.sh \
     backup-rsnapshot.sh backup-rsnapshot.inc.sh \
     check-version.sh check-version.inc.sh run-as.sh \
     local-ubuntu-version.sh remote-ubuntu-version.sh local-git-version.sh remote-git-version.sh \
     create_ssl_certificate_openssl.sh create_ssl_certificate.inc.sh \
     restart.sh volumes.sh volumes.inc.sh \
     show help.base.sh display-dockerfile.sh \
     /usr/local/bin/

# /etc/my_init.d
COPY 00_chown_volumes.sh 00_chown_volumes.inc.sh \
     01_install_locale.sh 01_install_locale.inc.sh \
     02_change_default_locale.sh 02_change_default_locale.inc.sh \
     20_create_rsnapshot_conf.sh 20_create_rsnapshot_conf.inc.sh \
     21_tune_rsync_conf.sh 21_tune_rsync_conf.inc.sh \
     30_create_monit_filesystem_check.sh 30_create_monit_filesystem_check.inc.sh \
     31_create_monit_http_conf.sh 31_create_monit_http_conf.inc.sh \
     32_create_monit_port_check.sh 32_create_monit_port_check.inc.sh \
     33_create_monit_mail_conf.sh 33_create_monit_mail_conf.inc.sh \
     34_change_dockersock_permissions.sh 34_change_dockersock_permissions.inc.sh \
     /etc/my_init.d/

# /etc/my_exec.d
COPY my_exec.d/cron my_exec.d/help my_exec.d/monit my_exec.d/rsnapshot \
     my_exec.d/syslog my_exec.d/ssh my_exec.d/exim4 \
     /etc/my_exec.d/

COPY my_exec /sbin/my_exec
COPY logger /etc/service/.template/log/run

# cron
COPY versioncheck.daily rsnapshot.daily /etc/cron.daily/
COPY rsnapshot.weekly /etc/cron.weekly/rsnapshot.weekly
COPY rsnapshot.monthly /etc/cron.monthly/rsnapshot.monthly

RUN mkdir -p /etc/my_exec.d && \
    for s in .template monit cron sshd exim4; do \
      mkdir -p /etc/service/${s}/log; \
    done && \
    touch /var/local/docker-installed-packages.txt && \
    chmod +x /usr/local/bin/*.sh /etc/my_init.d/*.sh && \
    mkdir /etc/cron.now && \
    echo "* *     * * *   root    cd / && run-parts --report /etc/cron.now" >> /etc/crontab

RUN mkdir /Dockerfiles && \
    /usr/sbin/usermod -d /backup ${BACKUP_USER} && \
    /usr/sbin/groupadd ${DOCKER_GROUP} && \
    /usr/sbin/useradd -g ${DOCKER_GROUP} -G ${DOCKER_GROUP} -s /bin/false -c "Docker user" ${DOCKER_USER} && \
    ln -s /usr/local/bin/create_ssl_certificate.inc.sh /usr/local/bin/create_ssl_certificate_openssl.inc.sh && \
    ln -s /usr/local/bin/volumes.sh /usr/local/bin/volumes

RUN ${APTGET_INSTALL} --update wget mailutils gettext monit rsnapshot exim4 sasl2-bin opendkim opendkim-tools localepurge apt-utils net-tools spf-tools-perl sudo && \
    ${APTGET_CLEANUP}

RUN SERVICE_USER=Debian-exim SERVICE_GROUP=Debian-exim SSL_CERTIFICATE_ALIAS=${IMAGE}-${TAG} /usr/local/bin/create_ssl_certificate_openssl.sh -vv && \
    ln -s /etc/ssl/private/${IMAGE}-${TAG}.key /etc/exim4/exim.key && \
    ln -s /etc/ssl/private/${IMAGE}-${TAG}.crt /etc/exim4/exim.crt && \
    update-exim4.conf && \
    echo 'source /etc/bash.locale' >> /etc/bash.bashrc
RUN if [ -n "${LOCALES}" ]; then \
      for _locale in ${LOCALES}; do \
        ${APTGET_INSTALL} language-pack-${_locale%_*}-base; \
      done; \
      ${APTGET_CLEANUP} && \
      rm -f /var/lib/locales/supported.d/* && \
      for _locale in ${LOCALES}; do \
        for _encoding in ${ENCODINGS}; do \
          /etc/my_init.d/01_install_locale.sh ${_locale} ${_encoding}; \
        done; \
      done; \
    fi
RUN /etc/my_init.d/02_change_default_locale.sh ${DEFAULT_LOCALE} ${DEFAULT_ENCODING}
RUN rm -f /etc/localtime && \
    ln -s /usr/share/zoneinfo/${TIMEZONE} /etc/localtime && \
    cd /bin && rm -f /bin/sh && ln -s /bin/bash sh && \
    chmod +x -- /usr/local/bin/help.base.sh /usr/local/bin/display-dockerfile.sh /usr/local/bin/show && \
    ln -s -- /usr/local/bin/display-dockerfile.sh /usr/local/bin/Dockerfile && \
    ln -s -- /usr/local/bin/help.base.sh /usr/local/bin/-h && \
    ln -s -- /usr/local/bin/help.base.sh /usr/local/bin/--help && \
    ln -s -- /usr/local/bin/Dockerfile /usr/local/bin/dockerfile && \
    ln -s -- /usr/local/bin/backup.sh /usr/local/bin/backup && \
    ln -s -- /usr/local/bin/ssh.sh /usr/local/bin/ssh-public && \
    ln -s -- /usr/local/bin/ssh.sh /usr/local/bin/ssh-private && \
    ln -s -- /backup/rsnapshot /var/cache/rsnapshot && \
    for s in cron monit sshd exim4; do \
      cp /etc/service/.template/log/run /etc/service/${s}/log/run; \
    done && \
    chmod +x /etc/service/.template/log/run /etc/service/*/log/run /etc/service/*/run && \
    sed -i 's|^\(\s*\)set logfile\(.*\)|#\1set logfile\2|g' /etc/monit/monitrc && \
    sed -i 's/^#logfile/logfile/g' /etc/rsnapshot.conf && \
    sed -i 's/^#cmd_ssh/cmd_ssh/g' /etc/rsnapshot.conf && \
    sed -i 's|^#ssh_args.*|ssh_args\t-i /etc/ssh/ssh_host_dsa_key|g' /etc/rsnapshot.conf && \
    sed -i 's|^snapshot_root.*|snapshot_root\t/backup/rsnapshot/|g' /etc/rsnapshot.conf && \
    ln -s /usr/local/bin/backup-volumes.sh /etc/cron.hourly/backup-volumes && \
    for p in hourly daily weekly monthly; do \
      ln -s /usr/local/bin/backup-rsnapshot.sh /etc/cron.${p}/backup-rsnapshot; \
    done

COPY service.cron /etc/service/cron/run
COPY service.monit /etc/service/monit/run
COPY service.exim4 /etc/service/exim4/run
COPY monit-syslog.conf /etc/monit/monitrc.d/syslog
COPY monit-mail.conf.tmpl /var/local/monit-mail.conf.tmpl
COPY remote-rsyslogd.conf /etc/rsyslog.d/10-rsyslog.conf
COPY exim.00_local_macros /etc/exim4/conf.d/00_local_macros

ENTRYPOINT ["/sbin/my_exec"]
CMD ["/sbin/my_init"]

@include("copy-metadata")
@include("symlinks")
@include("instructions")

# * DOCKERFILES
#
# Children must provide:
# - /README: to describe the image.
# - /LICENSE: rights and restrictions on how to use, inspect, modify and distribute this image.
# - /Dockerfiles/copyright-preamble.txt: A short summary of the license. It's included, as well
#   as the README, when displaying the help to the user.
# - ${DOLLAR}{SERVICE_VERSION}: The service version information.
# - ${DOLLAR}{SERVICE_USER}: The user under which the service runs.

# Children should provide:
# - service: to run the process (letting runit handling forking it).
# - monit.conf: how to monitor the process (or disable monit via declaring ENABLE_MONIT=false).
# - check-version-${DOLLAR}{IMAGE}: A script to retrieve the information about the latest version of the service.
# - ${DOLLAR}{SERVICE}: The name of the service (matches a folder under /etc/service/).
# - ${DOLLAR}{SERVICE_GROUP}: The group of the user under which the service runs. Defaults to ${DOLLAR}{SERVICE_USER}.
# - ${DOLLAR}{SERVICE_PACKAGE}: The package name, if the service is installed through the package manager.
#
# And then add steps in their Dockerfile such as the following:
# COPY README /README
# RUN mkdir /etc/service/${IMAGE} && cp -r /etc/service/.template/* /etc/service/${IMAGE}
# COPY service /etc/service/${IMAGE}/run
# RUN chmod +x /etc/service/${IMAGE}/run
# COPY monit.conf /etc/monit/monitrc.d/${DOLLAR}{IMAGE}.conf
# COPY backup.sh /usr/local/bin/backup-${DOLLAR}{NAMESPACE}-${DOLLAR}{IMAGE}_${DOLLAR}{TAG}.sh
# COPY check-version.sh /usr/local/bin/check-version.sh-${DOLLAR}{SERVICE}
# RUN chmod +x /usr/local/bin/*
#
# If the process is itself a daemon which cannot be run in foreground,
# then provide a LSB-like script and call it from within /etc/rc.local:
# COPY service /etc/rc.local
# RUN chmod +x /etc/rc.local
#
# Before finishing the Dockerfile, please RUN ${DOLLAR}{APTGET_CLEANUP} if the
# image installs packages via ${DOLLAR}{APTGET_INSTALL}.
#
# Additionaly, every Dockerfile should add its own Dockerfile to the /Dockerfiles
# folder:
# COPY Dockerfile /Dockerfiles/${DOLLAR}{NAMESPACE}-${DOLLAR}{IMAGE}.${DOLLAR}{TAG}
#
# And last, adding comments on how to run the image is very helpful.
#
# * BACKUPS
#
# If ENABLE_RSNAPSHOT is activated at build time, then the resulting image will
# trigger a built-in rsnapshot-based backup mechanism.
# Such mechanism analyzes all VOLUMEs in all Dockerfiles (the image's, and its ancestors).
# For all volumes under /backup folder, rsnapshot will take care of their backup.
# Additionally, if the Dockerfile stores scripts starting by "backup-"
# in /usr/local/bin, rsnapshot will invoke them passing the volume folder as argument.
#
# Once the cron daemon triggers awakes the rsnapshot process, it will run any backup
# scripts. Afterwards, cron will transfer the contents of the backup volumes to a remote
# server (${IMAGE}${BACKUP_HOST_PREFIX}), using the "backup" user.
# To authenticate, it will use the very same ssh key generated when building
# this image.
#
# Therefore, the expected way to set a remotely-hosted backup, is:
# 1) Run this image in a remote host that will store the backups:
#    > docker run -d --name ${IMAGE}-backup --hostname ${IMAGE}-backup \
#             (-v [host-path]:[volume])+ \
#             -p ${BACKUP_HOST_SSH_PORT}:22 ${{NAMESPACE}/backup backup
# 2) Launch container(s) normally (as described in their README).
