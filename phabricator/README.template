This image runs Phabricator as a Docker container.

Examples:

- Run Phabricator accessing a MariaDB/MySQL instance:
> docker run -p [port]:8000 -p 22:22 --link [db-container]:db -e VIRTUAL_HOST=${PHABRICATOR_VIRTUAL_HOST} --add-host ${SMTP_HOST}:${SMTP_HOST} --volumes-from [data-container]  --link [loghost]:logger ${NAMESPACE}/${IMAGE}:${TAG}

- Run arcanist:
> docker run --name arc -v ${PWD}:/arc ${NAMESPACE}/${IMAGE}:${TAG} arc

- Run Phabricator to retrieve the required SQL to bootstrap it.

> rm -f ~/sql/*
> docker run -it ${NAMESPACE}/${IMAGE}:${TAG} create-db-user > ~/sql/user.sql
> docker run -it --link db:db -v ~/sql:/sql ${NAMESPACE}/mariadb-bootstrap:${TAG} -u ${MARIADB_ADMIN_USER} -p ${MARIADB_ADMIN_PASSWORD}
> rm -f ~/sql/*
> docker run -it ${NAMESPACE}/${IMAGE}:${TAG} db-grants > ~/sql/grants.sql
> docker run -it --link db:db -v ~/sql:/sql ${NAMESPACE}/mariadb-bootstrap:${TAG} -u ${MARIADB_ADMIN_USER} -p ${MARIADB_ADMIN_PASSWORD}

You can create the databases looping through each of them:

> rm -f ~/sql/*
> for d in $(docker run -it ${NAMESPACE}/${IMAGE}:${TAG} databases); do docker run -it ${NAMESPACE}/${IMAGE}:${TAG} bootstrap sql ${d} > ~/sql/${d}.sql; done
docker run -it --link db:db -v ~/sql:/sql ${NAMESPACE}/mariadb-bootstrap:${TAG} -u ${MARIADB_ADMIN_USER} -p ${MARIADB_ADMIN_PASSWORD}

Otherwise you can let Phabricator provide all the DDL in one single step:

> rm -f ~/sql/*
> docker run -it ${NAMESPACE}/${IMAGE}:${TAG} sql > ~/sql/phabricator.sql
> docker run -it --link db:db -v ~/sql:/sql ${NAMESPACE}/mariadb-bootstrap:${TAG} -u ${MARIADB_ADMIN_USER} -p ${MARIADB_ADMIN_PASSWORD}

- Run Phabricator to provide the SQL required to create the database user:
> docker run -it ${NAMESPACE}/${IMAGE}:${TAG} create-db-user

- Run Phabricator to provide the SQL required to update the password of the database user:
> docker run -it ${NAMESPACE}/${IMAGE}:${TAG} change-db-password

- Run Phabricator to provide the SQL required to grant the correct permissions to the database user:
> docker run -it ${NAMESPACE}/${IMAGE}:${TAG} db-grants

- Run Phabricator to provide the names of all Phabricator databases:
> docker run -it ${NAMESPACE}/${IMAGE}:${TAG} databases

- Run Phabricator to print the SQL required to deploy all Phabricator databases:
> docker run -it ${NAMESPACE}/${IMAGE}:${TAG} sql

- Run Phabricator to print the SQL required to deploy a single database:
for Liquibase (see ${NAMESPACE}/liquibase-[mariadb|postgresql]):
> docker run -it ${NAMESPACE}/${IMAGE}:${TAG} db-sql [dbName]

- Run Phabricator to print the SQL required to apply all post-statements provided by Phabricator:
> docker run -it ${NAMESPACE}/${IMAGE}:${TAG} sql-post

- Run Phabricator to print the Liquibase changeLog file for a given database:
for Liquibase (see ${NAMESPACE}/liquibase-[mariadb|postgresql]):
> docker run -it ${NAMESPACE}/${IMAGE}:${TAG} liquibase [dbName]

- Upgrade a previous Phabricator database:
> docker run -it --link [db-container]:db ${NAMESPACE}/${IMAGE}:${TAG} upgrade

# Backup

The built-in backup mechanism copies regularly the contents of /backup/phabricator-* and /backup/rsnapshot to a remote server ${IMAGE}${BACKUP_HOST_SUFFIX},
which is expected to be running a SSH server listening at port ${BACKUP_HOST_SSH_PORT}.

## Preparation

In the host at ${IMAGE}${BACKUP_HOST_SUFFIX}, launch another Phabricator container as follows:

> docker run -d --name ${IMAGE}-backup -v [host-folder]/${IMAGE}/repo:/backup/${IMAGE}-repo -v [host-folder]/${IMAGE}/local:/backup/${IMAGE}-local -v [host-folder]/${IMAGE}/rsnapshot:/backup/rsnapshot ${REGISTRY}/${NAMESPACE}/${IMAGE}:${TAG} backup

Additionally, run a backup container for the MariaDB database as well.

## Recovery

The recovery process, once the original Phabricator instance (and its associated database) is shutdown, consists of:

- Recovering the database contents. Details are provided by the image itself:

> docker run -it ${NAMESPACE}/mariadb help

- Copying the contents of [host-folder]/${IMAGE}/repo, [host-folder]/${IMAGE}/local and [host-folder]/${IMAGE}/rsnapshot to the server where Phabricator will run.
- Launching a new container as defined in this document, binding the volumes of the container to the host folders.