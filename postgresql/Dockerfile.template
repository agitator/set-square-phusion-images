# ${NAMESPACE}/${REPO}:${TAG} Dockerfile (generated at ${DATE})
FROM ${BASE_IMAGE}:${TAG}
MAINTAINER ${MAINTAINER}

RUN mkdir /etc/service/${IMAGE} && cp -r /etc/service/.template/* /etc/service/${IMAGE}
COPY service /etc/service/${IMAGE}/run
#COPY logstash.conf /etc/logstash/conf.d/${IMAGE}.conf
COPY README /README
COPY bootstrap-db /usr/local/bin/bootstrap-db.sh
COPY process-sqls.sh /usr/local/bin/process-sqls.sh
COPY ${IMAGE}-cron.sh /usr/local/bin/${IMAGE}-cron.sh
COPY ${IMAGE}-sqls.cron /etc/cron.d/${IMAGE}-sqls

# From http://docs.docker.com/examples/postgresql_service

# Add the PostgreSQL PGP key to verify their Debian packages.
# It should be the same key as https://www.postgresql.org/media/keys/ACCC4CF8.asc
RUN apt-key adv --keyserver keyserver.ubuntu.com --recv-keys B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8 && \
    echo "deb http://apt.postgresql.org/pub/repos/apt/ precise-pgdg main" > /etc/apt/sources.list.d/pgdg.list
RUN ${APTGET_INSTALL} python-software-properties software-properties-common postgresql-${POSTGRESQL_VERSION} postgresql-client-${POSTGRESQL_VERSION} postgresql-contrib-${POSTGRESQL_VERSION} daemontools && \
    ${APTGET_CLEANUP} && \
    update-rc.d postgresql disable && \
    gpasswd -a postgres crontab && \
    gpasswd -a postgres ssl-cert && \
    rm -f /etc/init.d/postgres && \
    mkdir -p /var/lib/postgresql-sql && \
    chown -R postgres:postgres /var/lib/postgresql /var/lib/postgresql-sql && \
    chmod +x /etc/service/${IMAGE}/run && \
    chmod +x /usr/local/bin/bootstrap-db.sh && \
    chmod +x /usr/local/bin/process-sqls.sh && \
    chmod +x /usr/local/bin/${IMAGE}-cron.sh

COPY setup.sql /usr/local/src/setup.sql.tpl

# Expose the PostgreSQL port
EXPOSE 5432

# Add VOLUMEs to allow backup of config, logs and databases
# This have to be done in child Dockerfiles, in order to make Dockerfile DB changes persist.
# See http://stackoverflow.com/questions/27377876/docker-postgres-with-initial-data-is-not-persisted-over-commits
#VOLUME  ["/etc/postgresql", "/var/log/postgresql", "/var/lib/postgresql"]

COPY Dockerfile /Dockerfiles/Dockerfile
COPY Dockerfile /Dockerfiles/${NAMESPACE}-${IMAGE}.${TAG}

# You can run this image with
# docker run -d --[loghost]:logger --name ${IMAGE} -p 5432:5432 ${NAMESPACE}/${IMAGE}
