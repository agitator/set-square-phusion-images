This image runs Nexus ${NEXUS_VERSION}

A default Logstash configuration may not be enough for your specific needs.
You can provide yours when launching the image, by volume-mounting
/etc/logstash/conf.d/${IMAGE}.conf

Examples:
- Default invocation:
> docker run -p ${NEXUS_UI_HTTP_PORT}:${NEXUS_UI_HTTP_PORT} -p ${NEXUS_UI_HTTPS_PORT}:${NEXUS_UI_HTTPS_PORT} -p ${NEXUS_DOCKER_REGISTRY_PORT}:${NEXUS_DOCKER_REGISTRY_PORT} -p ${NEXUS_DOCKER_GROUP_PORT}:${NEXUS_DOCKER_GROUP_PORT} -v ${HOST_VOLUMES_ROOT_FOLDER}/${IMAGE}/conf:/backup/nexus-conf -v ${HOST_VOLUMES_ROOT_FOLDER}/${IMAGE}/blobs:/backup/nexus-blobs -v ${HOST_VOLUMES_ROOT_FOLDER}/${IMAGE}/db:/backup/nexus-db --name ${IMAGE} ${NAMESPACE}/${IMAGE}:${TAG}

- Run Nexus, using a data container to store its persistent data (which declares /sonatype_work as volume}:
> docker run -p ${NEXUS_UI_HTTP_PORT}:${NEXUS_UI_HTTP_PORT} -p ${NEXUS_UI_HTTPS_PORT}:${NEXUS_UI_HTTPS_PORT} -p ${NEXUS_DOCKER_REGISTRY_PORT}:${NEXUS_DOCKER_REGISTRY_PORT} -p ${NEXUS_DOCKER_GROUP_PORT}:${NEXUS_DOCKER_GROUP_PORT}  --volumes-from [data-container] ${NAMESPACE}/${IMAGE}:${TAG}

- To customize how Logstash processes Nexus logs:
> docker run .. -v [my-logstash-conf]:/etc/logstash/conf.d/${IMAGE}.conf ..

- Of course, you can disable Logstash altogether if you so wish:
> docker run .. -e ENABLE_LOGSTASH=false ..

# Backup

The built-in backup mechanism copies regularly the contents of /backup/nexus-* and /backup/rsnapshot to a remote server ${IMAGE}{BACKUP_HOST_SUFFIX},
which is expected to be running a SSH server listening at port ${BACKUP_HOST_SSH_PORT).

## Preparation

In the host at ${IMAGE}${BACKUP_HOST_SUFFIX}, launch another Nexus container as follows:

> docker run -d --name ${IMAGE}-backup -v [host-folder]/nexus/blobs:/backup/nexus-blobs -v [host-folder]/nexus/conf:/backup/nexus-conf -v [host-folder]/nexus/db:/backup/nexus-db -v [host-folder]/nexus/rsnapshot:/backup/rsnapshot ${REGISTRY}/${NAMESPACE}/${IMAGE}:${TAG} backup

## Configuration

In the web interface, you'll need to create three groups: a proxy for Docker hub, a hosted group for in-house images, and a group containing them.

To do so, assuming you have an nginx-proxy upfront (or the ${NEXUS_UI_HTTP_PORT} port is mapped to 80), first visit http://${VIRTUAL_HOST}. Then, login as admin/admin123.

Go to Components.

### Docker Hub

- Create a new 'docker (proxy)'.
- Use 'Docker Hub proxy' as name.
- Specify https://registry-1.docker.io for the Remote storage URL.
- Enable Docker V1 API support, if required by the remote repository.
- Enter https://index.docker.io/ as the url of the Docker index.
- Select Blob store for Storage

### In-house images

- Create a new 'docker (hosted)'.
- Name it as '${NAMESPACE} images'.
- Choose the Blob store.

### Repository Group

- Create a new 'docker (group)',
- Name it as 'Docker'.
- Choose the Blob store to use.
- Add '${Namespace} images' to the group.
- Add 'Docker Hub proxy' to the group.

## Recovery

The recovery process, once the original Nexus instance is shutdown, consists of:
- Copying the contents of [host-folder]/nexus/blobs, [host-folder]/nexus/conf, [host-folder]/nexus/db, and [host-folder]/nexus/rsnapshot to the server where Nexus will run.
- Launch a new container as defined in this document, binding the volumes of the container to the host folders.

## Important notice

It's important to notice that this image can be used as Docker registry. So if it's shut down, it obviously cannot serve any Docker images nor layers.
For that reason, it's recommended to identify potential hosts that would be potentially used for Nexus fail-back hosts, and ensure they have their local copy of ${REGISTRY}/${NAMESPACE}/${IMAGE}:${TAG}. For "latest" tags, that would need a cron job to force they stay current.
